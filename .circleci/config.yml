# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
#ORBS NOT AUTHORIZED
#orbs:
#  rails: finalcad/rails@2.3.0
#  node: circleci/node@2

executors:
  default:
    docker:
      # include node
      - image: circleci/ruby:<< parameters.ruby_version >>
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_PATH: ./vendor/bundle
          RAILS_ENV: test
          DB_USERNAME: db_username
          DB_NAME: test_database
          DB_PASSWORD: ''
      - image: circleci/postgres:<< parameters.psql_version >>
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: db/development
          POSTGRES_PASSWORD: '1234'
          POSTGRES_HOST_AUTH_METHOD: trust
    parameters:
      ruby_version:
        type: string
        default: 2.5.1-stretch-node
      psql_version:
        type: string
        default: "9.6.16"

jobs:
  ruby-install-deps:
    docker:
      - image: cimg/base:stable
    parameters:
      app-dir:
        default: .
        description: >
          Path to the directory containing your Gemfile file. Not needed if Gemfile
          lives in the root.
        type: string
      bundler-version:
        default: ''
        description: >
          Configure which version of bundler to install and utilize. By default, it
          gets the bundler version from Gemfile.lock, but if it is not working use
          this to override.
        type: string
      key:
        default: gems-v1
        description: The cache key to use. The key is immutable.
        type: string
      path:
        default: ./vendor/bundle
        description: >
          Installation path. By default, it will run bundle with `--deployment` flag
          and installs gems to the vendor/bundle directory.
        type: string
      with-cache:
        default: true
        description: Enable automatic caching of your gemfile dependencies for increased speed.
        type: boolean
    steps:
      - checkout
      - when:
          condition: <<parameters.with-cache>>
          steps:
            - restore_cache:
                keys:
                  - >-
                    << parameters.key >>-{{ checksum
                    "<<parameters.app-dir>>/Gemfile.lock"  }}-{{ .Branch }}
                  - >-
                    << parameters.key >>-{{ checksum
                    "<<parameters.app-dir>>/Gemfile.lock"  }}
                  - << parameters.key >>
      - run:
          command: |
            if test -f "Gemfile.lock"; then
              APP_BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")
              if [ -z "$APP_BUNDLER_VERSION" ]; then
                echo "Could not find bundler version from Gemfile.lock. Please use bundler-version parameter"
              else
                echo "Gemfile.lock is bundled with bundler version $APP_BUNDLER_VERSION"
              fi
            fi

            if ! [ -z <<parameters.bundler-version>> ]; then
              echo "Found bundler-version parameter to override"
              APP_BUNDLER_VERSION=<<parameters.bundler-version>>
            fi

            if ! echo $(bundle version)  | grep -q $APP_BUNDLER_VERSION; then
              echo "Installing bundler $APP_BUNDLER_VERSION"
              gem install bundler:$APP_BUNDLER_VERSION
            else
              echo "bundler $APP_BUNDLER_VERSION is already installed."
            fi

            if bundle config set > /dev/null 2>&1; then
              if [ "<< parameters.path >>" == "./vendor/bundle" ]; then
                bundle config deployment 'true'
              fi
              bundle config path << parameters.path >>
            else
              if [ "<< parameters.path >>" == "./vendor/bundle" ]; then
                bundle config set deployment 'true'
              fi
              bundle config set path << parameters.path >>
            fi

            bundle check || bundle install
          name: >-
            Bundle Install <<^parameters.with-cache>>(No
            Cache)<</parameters.with-cache>>
          working_directory: <<parameters.app-dir>>
      - when:
          condition: <<parameters.with-cache>>
          steps:
            - save_cache:
                key: >-
                  << parameters.key >>-{{ checksum
                  "<<parameters.app-dir>>/Gemfile.lock"  }}-{{ .Branch }}
                paths:
                  - <<parameters.app-dir>>/<< parameters.path >>

  test:
    docker:
      - image: cimg/ruby:2.7-node
      - image: cimg/postgres:14.0
        environment: # add POSTGRES environment variables.
          POSTGRES_USER: postgres
          POSTGRES_DB: db/test
          POSTGRES_PASSWORD: "1234"
    #parallelism: 3
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      PGHOST: 127.0.0.1
      PGUSER: postgres
      PGPASSWORD: "1234"
      RAILS_ENV: test
    steps:
      - checkout
      - run:
          name: DB Locate
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: DB Setup
          command: bundle exec rails db:schema:load --trace
      - run:
          name: Run RSPEC
          command:  |
            TESTFILES=$(circleci tests glob "spec/requests/*_spec.rb" | circleci tests split --split-by=timings --timings-type=classname)
            echo $TESTFILES
            bundle exec rspec --profile 10 --out ~/test_reports/rspec.xml --format progress ${TESTFILES} --format progress \

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  workflow:
    jobs:
      - ruby-install-deps
      - test



